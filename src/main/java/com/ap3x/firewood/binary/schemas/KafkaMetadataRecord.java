/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ap3x.firewood.binary.schemas;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class KafkaMetadataRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"KafkaMetadataRecord\",\"namespace\":\"br.com.rivendel.bigdata.binary.schemas\",\"fields\":[{\"name\":\"objectURI\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"filename\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"version\",\"type\":\"long\"},{\"name\":\"recordId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
    public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
    @Deprecated public java.lang.String objectURI;
    @Deprecated public java.lang.String filename;
    @Deprecated public long version;
    @Deprecated public java.lang.String recordId;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public KafkaMetadataRecord() {}

    /**
     * All-args constructor.
     */
    public KafkaMetadataRecord(java.lang.String objectURI, java.lang.String filename, java.lang.Long version, java.lang.String recordId) {
        this.objectURI = objectURI;
        this.filename = filename;
        this.version = version;
        this.recordId = recordId;
    }

    public org.apache.avro.Schema getSchema() { return SCHEMA$; }
    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0: return objectURI;
            case 1: return filename;
            case 2: return version;
            case 3: return recordId;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }
    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value="unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0: objectURI = (java.lang.String)value$; break;
            case 1: filename = (java.lang.String)value$; break;
            case 2: version = (java.lang.Long)value$; break;
            case 3: recordId = (java.lang.String)value$; break;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'objectURI' field.
     */
    public java.lang.String getObjectURI() {
        return objectURI;
    }

    /**
     * Sets the value of the 'objectURI' field.
     * @param value the value to set.
     */
    public void setObjectURI(java.lang.String value) {
        this.objectURI = value;
    }

    /**
     * Gets the value of the 'filename' field.
     */
    public java.lang.String getFilename() {
        return filename;
    }

    /**
     * Sets the value of the 'filename' field.
     * @param value the value to set.
     */
    public void setFilename(java.lang.String value) {
        this.filename = value;
    }

    /**
     * Gets the value of the 'version' field.
     */
    public java.lang.Long getVersion() {
        return version;
    }

    /**
     * Sets the value of the 'version' field.
     * @param value the value to set.
     */
    public void setVersion(java.lang.Long value) {
        this.version = value;
    }

    /**
     * Gets the value of the 'recordId' field.
     */
    public java.lang.String getRecordId() {
        return recordId;
    }

    /**
     * Sets the value of the 'recordId' field.
     * @param value the value to set.
     */
    public void setRecordId(java.lang.String value) {
        this.recordId = value;
    }

    /** Creates a new KafkaMetadataRecord RecordBuilder */
    public static KafkaMetadataRecord.Builder newBuilder() {
        return new KafkaMetadataRecord.Builder();
    }

    /** Creates a new KafkaMetadataRecord RecordBuilder by copying an existing Builder */
    public static KafkaMetadataRecord.Builder newBuilder(KafkaMetadataRecord.Builder other) {
        return new KafkaMetadataRecord.Builder(other);
    }

    /** Creates a new KafkaMetadataRecord RecordBuilder by copying an existing KafkaMetadataRecord instance */
    public static KafkaMetadataRecord.Builder newBuilder(KafkaMetadataRecord other) {
        return new KafkaMetadataRecord.Builder(other);
    }

    /**
     * RecordBuilder for KafkaMetadataRecord instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<KafkaMetadataRecord>
            implements org.apache.avro.data.RecordBuilder<KafkaMetadataRecord> {

        private java.lang.String objectURI;
        private java.lang.String filename;
        private long version;
        private java.lang.String recordId;

        /** Creates a new Builder */
        private Builder() {
            super(KafkaMetadataRecord.SCHEMA$);
        }

        /** Creates a Builder by copying an existing Builder */
        private Builder(KafkaMetadataRecord.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.objectURI)) {
                this.objectURI = data().deepCopy(fields()[0].schema(), other.objectURI);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.filename)) {
                this.filename = data().deepCopy(fields()[1].schema(), other.filename);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.version)) {
                this.version = data().deepCopy(fields()[2].schema(), other.version);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.recordId)) {
                this.recordId = data().deepCopy(fields()[3].schema(), other.recordId);
                fieldSetFlags()[3] = true;
            }
        }

        /** Creates a Builder by copying an existing KafkaMetadataRecord instance */
        private Builder(KafkaMetadataRecord other) {
            super(KafkaMetadataRecord.SCHEMA$);
            if (isValidValue(fields()[0], other.objectURI)) {
                this.objectURI = data().deepCopy(fields()[0].schema(), other.objectURI);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.filename)) {
                this.filename = data().deepCopy(fields()[1].schema(), other.filename);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.version)) {
                this.version = data().deepCopy(fields()[2].schema(), other.version);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.recordId)) {
                this.recordId = data().deepCopy(fields()[3].schema(), other.recordId);
                fieldSetFlags()[3] = true;
            }
        }

        /** Gets the value of the 'objectURI' field */
        public java.lang.String getObjectURI() {
            return objectURI;
        }

        /** Sets the value of the 'objectURI' field */
        public KafkaMetadataRecord.Builder setObjectURI(java.lang.String value) {
            validate(fields()[0], value);
            this.objectURI = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /** Checks whether the 'objectURI' field has been set */
        public boolean hasObjectURI() {
            return fieldSetFlags()[0];
        }

        /** Clears the value of the 'objectURI' field */
        public KafkaMetadataRecord.Builder clearObjectURI() {
            objectURI = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /** Gets the value of the 'filename' field */
        public java.lang.String getFilename() {
            return filename;
        }

        /** Sets the value of the 'filename' field */
        public KafkaMetadataRecord.Builder setFilename(java.lang.String value) {
            validate(fields()[1], value);
            this.filename = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /** Checks whether the 'filename' field has been set */
        public boolean hasFilename() {
            return fieldSetFlags()[1];
        }

        /** Clears the value of the 'filename' field */
        public KafkaMetadataRecord.Builder clearFilename() {
            filename = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /** Gets the value of the 'version' field */
        public java.lang.Long getVersion() {
            return version;
        }

        /** Sets the value of the 'version' field */
        public KafkaMetadataRecord.Builder setVersion(long value) {
            validate(fields()[2], value);
            this.version = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /** Checks whether the 'version' field has been set */
        public boolean hasVersion() {
            return fieldSetFlags()[2];
        }

        /** Clears the value of the 'version' field */
        public KafkaMetadataRecord.Builder clearVersion() {
            fieldSetFlags()[2] = false;
            return this;
        }

        /** Gets the value of the 'recordId' field */
        public java.lang.String getRecordId() {
            return recordId;
        }

        /** Sets the value of the 'recordId' field */
        public KafkaMetadataRecord.Builder setRecordId(java.lang.String value) {
            validate(fields()[3], value);
            this.recordId = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /** Checks whether the 'recordId' field has been set */
        public boolean hasRecordId() {
            return fieldSetFlags()[3];
        }

        /** Clears the value of the 'recordId' field */
        public KafkaMetadataRecord.Builder clearRecordId() {
            recordId = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        @Override
        public KafkaMetadataRecord build() {
            try {
                KafkaMetadataRecord record = new KafkaMetadataRecord();
                record.objectURI = fieldSetFlags()[0] ? this.objectURI : (java.lang.String) defaultValue(fields()[0]);
                record.filename = fieldSetFlags()[1] ? this.filename : (java.lang.String) defaultValue(fields()[1]);
                record.version = fieldSetFlags()[2] ? this.version : (java.lang.Long) defaultValue(fields()[2]);
                record.recordId = fieldSetFlags()[3] ? this.recordId : (java.lang.String) defaultValue(fields()[3]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}